From a61031bcc2503b525b5a61d322aa844a1c9ad4bd Mon Sep 17 00:00:00 2001
From: yatinkarel <ykarel@redhat.com>
Date: Mon, 20 Jul 2020 11:22:50 +0530
Subject: [PATCH] raise NotImplementedError on Python 2

---
 importlib_resources/__init__.py |  11 +---
 importlib_resources/_py2.py     | 107 --------------------------------
 2 files changed, 1 insertion(+), 117 deletions(-)
 delete mode 100644 importlib_resources/_py2.py

diff --git a/importlib_resources/__init__.py b/importlib_resources/__init__.py
index f122f95..e571eb9 100644
--- a/importlib_resources/__init__.py
+++ b/importlib_resources/__init__.py
@@ -41,13 +41,4 @@ if sys.version_info >= (3,):
         )
     from importlib_resources.abc import ResourceReader
 else:
-    from importlib_resources._py2 import (
-        contents,
-        is_resource,
-        open_binary,
-        open_text,
-        path,
-        read_binary,
-        read_text,
-        )
-    del __all__[:3]
+    raise NotImplementedError('Fedora package does not support Python 2')
diff --git a/importlib_resources/_py2.py b/importlib_resources/_py2.py
deleted file mode 100644
index dd8c7d6..0000000
--- a/importlib_resources/_py2.py
+++ /dev/null
@@ -1,107 +0,0 @@
-import os
-import errno
-
-from . import _common
-from ._compat import FileNotFoundError
-from io import BytesIO, TextIOWrapper, open as io_open
-
-
-def open_binary(package, resource):
-    """Return a file-like object opened for binary reading of the resource."""
-    resource = _common.normalize_path(resource)
-    package = _common.get_package(package)
-    # Using pathlib doesn't work well here due to the lack of 'strict' argument
-    # for pathlib.Path.resolve() prior to Python 3.6.
-    package_path = os.path.dirname(package.__file__)
-    relative_path = os.path.join(package_path, resource)
-    full_path = os.path.abspath(relative_path)
-    try:
-        return io_open(full_path, 'rb')
-    except IOError:
-        # This might be a package in a zip file.  zipimport provides a loader
-        # with a functioning get_data() method, however we have to strip the
-        # archive (i.e. the .zip file's name) off the front of the path.  This
-        # is because the zipimport loader in Python 2 doesn't actually follow
-        # PEP 302.  It should allow the full path, but actually requires that
-        # the path be relative to the zip file.
-        try:
-            loader = package.__loader__
-            full_path = relative_path[len(loader.archive)+1:]
-            data = loader.get_data(full_path)
-        except (IOError, AttributeError):
-            package_name = package.__name__
-            message = '{!r} resource not found in {!r}'.format(
-                resource, package_name)
-            raise FileNotFoundError(message)
-        return BytesIO(data)
-
-
-def open_text(package, resource, encoding='utf-8', errors='strict'):
-    """Return a file-like object opened for text reading of the resource."""
-    return TextIOWrapper(
-        open_binary(package, resource), encoding=encoding, errors=errors)
-
-
-def read_binary(package, resource):
-    """Return the binary contents of the resource."""
-    with open_binary(package, resource) as fp:
-        return fp.read()
-
-
-def read_text(package, resource, encoding='utf-8', errors='strict'):
-    """Return the decoded string of the resource.
-
-    The decoding-related arguments have the same semantics as those of
-    bytes.decode().
-    """
-    with open_text(package, resource, encoding, errors) as fp:
-        return fp.read()
-
-
-def path(package, resource):
-    """A context manager providing a file path object to the resource.
-
-    If the resource does not already exist on its own on the file system,
-    a temporary file will be created. If the file was created, the file
-    will be deleted upon exiting the context manager (no exception is
-    raised if the file was deleted prior to the context manager
-    exiting).
-    """
-    path = _common.files(package).joinpath(_common.normalize_path(resource))
-    if not path.is_file():
-        raise FileNotFoundError(path)
-    return _common.as_file(path)
-
-
-def is_resource(package, name):
-    """True if name is a resource inside package.
-
-    Directories are *not* resources.
-    """
-    package = _common.get_package(package)
-    _common.normalize_path(name)
-    try:
-        package_contents = set(contents(package))
-    except OSError as error:
-        if error.errno not in (errno.ENOENT, errno.ENOTDIR):
-            # We won't hit this in the Python 2 tests, so it'll appear
-            # uncovered.  We could mock os.listdir() to return a non-ENOENT or
-            # ENOTDIR, but then we'd have to depend on another external
-            # library since Python 2 doesn't have unittest.mock.  It's not
-            # worth it.
-            raise                     # pragma: nocover
-        return False
-    if name not in package_contents:
-        return False
-    return (_common.from_package(package) / name).is_file()
-
-
-def contents(package):
-    """Return an iterable of entries in `package`.
-
-    Note that not all entries are resources.  Specifically, directories are
-    not considered resources.  Use `is_resource()` on each entry returned here
-    to check if it is a resource or not.
-    """
-    package = _common.get_package(package)
-    return list(item.name for item in _common.from_package(package).iterdir())
-- 
2.20.1

